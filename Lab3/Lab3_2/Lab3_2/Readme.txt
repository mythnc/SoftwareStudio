＊所有的檔案皆以utf-8編碼。


目錄：
檔案結構
執行步驟
遇到的困難

檔案結構：

原始檔案共有2個java（不計算class檔）
IntCalculator.java - 整數計算機的實作檔。
LaunchIntCalculator.java - 啟動檔。


執行步驟：

＊直接用演算法來講解執行步驟

因為這是整數計算機，所以只能計算整數。
整數的範圍為2 ^ 31 - 1 ~ -2 ^ 31。
即2147483647 ~ -2147483648（皆10位數）
所以限制使用者輸入的位數為9位數。
計算過程中，若答案超過9位數，顯示ERROR。

0不可以當除數，否則顯示ERROR。

一旦ERROR，只有C鍵有作用。


C鍵的事件處理機制：
把所有的變數reset。
讓系統回到一開始的狀態。
JTextField預設為0，
text中無內容，
operator為+號、
ans為0等。


數字的事件處理機制（0~9）：
內存一個String text來接受使用者輸入的數字，
每當使用者輸入數字時，就去改變text的內容，
若無error（不超過9位數），就把text的值顯示在JTextField上。
否則顯示ERROR。

特殊情形：
若輸入的數字是0，只會顯示「0」，沒有「000000」的顯示方式。

operator的事件處理機制（+、-、*、/、=）：

正常情況下，每當使用者點擊operator，
就把上一次的計算結果顯示在JTextField，
若上次無計算結果，則顯示該operand。

除法運算中，除數不可為0，否則判定為ERROR。
任意算術中，答案不可超過9位數，否則判定為ERROR。

有下列特殊情形需要判斷：
1. 使用者輸入「operand1 ++--//*+*+++- operand2」
   只取最後一次的operator，即operand1 - operand2。
2. 使用者輸入「operand ?=」（?可以是任意的四則運算）
   做operand ?= operand;（?可以是任意的四則運算）
3. 使用者輸入「===========」
   依照前一次的operator，做相對應的運算。
   例如輸入「1 + 2 = = = = = = =」，就會1 + 2 + 2 + 2 + 2 ……。
   若一開始沒有輸入任何oeprator，那一直按「=」，並不會有任何改變。
   例如「1 = = = = = = = =」，都還是顯示1。

下列行為未定義：
輸入「333=33=3322=223==23」
程式的處理方式是把數字一直累積顯示在JTextField上。
（這類算術並沒有任何意義）


遇到的困難：
感覺此題目偏向Event-Driven Programming，
不知道與OO的關聯為何，所以寫得並不是很OO。

